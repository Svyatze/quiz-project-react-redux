{"ast":null,"code":"import axios from '../../axios/axios-quiz';\nimport { FETCH_QUIZES_ERROR, FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZ_SUCCESS } from './actionTypes';\nexport function fetchQuizes() {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get('/quizes.json');\n      const quizes = [];\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: `Тест №${index + 1}`\n        });\n      });\n      dispatch(fetchQuizesSuccess(quizes));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuizById(quizId) {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(`/quizes/${quizId}.json`);\n      const quiz = response.data;\n      dispatch(fetchQuizSuccess(quiz));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes\n  };\n}\nexport function fetchQuizesError(e) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: e\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return dispatch => {\n    if (this.state.answerState) {\n      const key = Object.keys(this.state.answerState)[0];\n\n      if (this.state.answerState[key] === 'success') {\n        return;\n      }\n    }\n\n    const question = this.state.quiz[this.state.activeQuestion];\n    const results = this.state.results;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = 'success';\n      }\n\n      this.setState({\n        answerState: {\n          [answerId]: 'success'\n        },\n        results\n      });\n      const timeout = window.setTimeout(() => {\n        if (this.isQuizFinished()) {\n          this.setState({\n            isFinished: true\n          });\n        } else {\n          this.setState({\n            activeQuestion: this.state.activeQuestion + 1,\n            answerState: null\n          });\n        }\n\n        window.clearTimeout(timeout);\n      }, 1000);\n    } else {\n      results[question.id] = 'error';\n      this.setState({\n        answerState: {\n          [answerId]: 'error'\n        },\n        results\n      });\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/react-components/src/store/actions/quiz.js"],"names":["axios","FETCH_QUIZES_ERROR","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZ_SUCCESS","fetchQuizes","dispatch","fetchQuizesStart","response","get","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","e","fetchQuizesError","fetchQuizById","quizId","quiz","fetchQuizSuccess","type","error","quizAnswerClick","answerId","state","answerState","question","activeQuestion","results","rightAnswerId","setState","timeout","window","setTimeout","isQuizFinished","isFinished","clearTimeout"],"mappings":"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","sourcesContent":["import axios from '../../axios/axios-quiz'\r\nimport { FETCH_QUIZES_ERROR, FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZ_SUCCESS} from './actionTypes'\r\n\r\nexport function fetchQuizes() {\r\n  return async dispatch => {\r\n    dispatch(fetchQuizesStart())\r\n    try {\r\n      const response = await axios.get('/quizes.json')\r\n      const quizes = []\r\n\r\n      Object.keys(response.data).forEach((key, index) => {\r\n        quizes.push({\r\n          id: key,\r\n          name: `Тест №${index + 1}`\r\n        })\r\n      })\r\n\r\n      dispatch(fetchQuizesSuccess (quizes))\r\n    } catch (e) {\r\n      dispatch(fetchQuizesError(e))\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchQuizById(quizId) {\r\n  return async dispatch => {\r\n    dispatch(fetchQuizesStart())\r\n\r\n    try {\r\n      const response = await axios.get(`/quizes/${quizId}.json`)\r\n      const quiz = response.data\r\n      dispatch(fetchQuizSuccess(quiz))\r\n    } catch (e) {\r\n      dispatch(fetchQuizesError(e))\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchQuizSuccess(quiz) {\r\n  return {\r\n    type: FETCH_QUIZ_SUCCESS,\r\n    quiz\r\n  }\r\n}\r\n\r\nexport function fetchQuizesStart() {\r\n  return {\r\n    type: FETCH_QUIZES_START\r\n  }\r\n}\r\n\r\nexport function fetchQuizesSuccess(quizes) {\r\n  return {\r\n    type: FETCH_QUIZES_SUCCESS,\r\n    quizes\r\n  }\r\n}\r\n\r\nexport function fetchQuizesError(e) {\r\n  return {\r\n    type: FETCH_QUIZES_ERROR,\r\n    error: e\r\n  }\r\n}\r\n\r\nexport function quizAnswerClick(answerId) {\r\n  return (dispatch, ) => {\r\n    if (this.state.answerState) {\r\n      const key = Object.keys(this.state.answerState)[0]\r\n      if (this.state.answerState[key] === 'success') {\r\n        return\r\n      }\r\n    }\r\n\r\n    const question = this.state.quiz[this.state.activeQuestion]\r\n    const results = this.state.results\r\n\r\n    if (question.rightAnswerId === answerId) {\r\n      if (!results[question.id]) {\r\n        results[question.id] = 'success'\r\n      }\r\n\r\n      this.setState({\r\n        answerState: { [answerId]: 'success'},\r\n        results\r\n      })\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        if (this.isQuizFinished()) {\r\n          this.setState({\r\n            isFinished: true\r\n          })\r\n        } else {\r\n          this.setState({\r\n            activeQuestion: this.state.activeQuestion + 1,\r\n            answerState: null\r\n          })\r\n        }\r\n\r\n        window.clearTimeout(timeout)\r\n      }, 1000)\r\n    } else {\r\n      results[question.id] = 'error'\r\n      this.setState({\r\n        answerState: { [answerId]: 'error' },\r\n        results\r\n      })\r\n    } \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}